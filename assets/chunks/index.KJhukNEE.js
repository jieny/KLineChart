import{C as n}from"./theme.4VXR6G7u.js";import{b as t,o as a,k as e}from"./framework.oU-LsNvg.js";const i=JSON.parse(`{"js":"import { init } from 'klinecharts';\\n\\nconst chart = init('init-basic-chart');\\n\\nfetch('https://klinecharts.com/datas/kline.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n"}`),x={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-basic-chart",code:e(i).js},null,8,["code"]))}},o=JSON.parse(`{"js":"import { init } from 'klinecharts';\\n\\nconst chart = init('init-layout-chart', {\\n  layout: [\\n    {\\n      type: 'candle',\\n      content: ['MA', { name: 'EMA', calcParams: [10, 30] }],\\n      options: { order: Number.MIN_SAFE_INTEGER }\\n    },\\n    { type: 'indicator', content: ['VOL'], options: { order: 10 }  },\\n    { type: 'xAxis', options: { order: 9 } }\\n  ]\\n})\\n\\nfetch('https://klinecharts.com/datas/kline.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n"}`),N={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-layout-chart",code:e(o).js},null,8,["code"]))}},h=JSON.parse(`{"js":"import { init } from 'klinecharts';\\n\\nconst chart = init(\\n  'init-locale-built-in-chart',\\n  { locale: 'zh-CN' }\\n)\\n\\nfetch('https://klinecharts.com/datas/kline.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n"}`),L={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-locale-built-in-chart",code:e(h).js},null,8,["code"]))}},d=JSON.parse(`{"js":"import { init } from 'klinecharts';\\n\\nconst chart = init(\\n  'init-timezone-chart',\\n  { timezone: 'Europe/Berlin' }\\n)\\n\\nfetch('https://klinecharts.com/datas/kline.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n"}`),v={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-timezone-chart",code:e(d).js},null,8,["code"]))}},l=JSON.parse(`{"js":"import { init } from 'klinecharts';\\n\\nconst chart = init(\\n  'init-styles-built-in-chart',\\n  { styles: 'light' }\\n)\\n\\nfetch('https://klinecharts.com/datas/kline.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n"}`),S={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-styles-built-in-chart",code:e(l).js},null,8,["code"]))}},p=JSON.parse(`{"js":"import { init } from 'klinecharts';\\n\\nconst chart = init(\\n  'init-styles-override-chart',\\n  {\\n    styles: {\\n      candle: {\\n        bar: {\\n          upColor: '#8fd3e8',\\n          upBorderColor: '#8fd3e8',\\n          upWickColor: '#8fd3e8',\\n          downColor: '#edafda',\\n          downBorderColor: '#edafda',\\n          downWickColor: '#edafda',\\n        }\\n      }\\n    }\\n  }\\n)\\n\\nfetch('https://klinecharts.com/datas/kline.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n"}`),g={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-styles-override-chart",code:e(p).js},null,8,["code"]))}},m=JSON.parse("{\"js\":\"import { init } from 'klinecharts';\\n\\nconst chart = init(\\n  'init-formatDate-chart',\\n  {\\n    customApi: {\\n      formatDate: (timestamp, _, type) => {\\n        const date = new Date(timestamp)\\n        const year = date.getFullYear()\\n        const month = `${date.getMonth() + 1}`.padStart(2, '0')\\n        const day = `${date.getDate()}`.padStart(2, '0')\\n        const hour = `${date.getHours()}`.padStart(2, '0')\\n        const minute = `${date.getMinutes()}`.padStart(2, '0')\\n        switch (type) {\\n          case 0: {\\n            return `${year}-${month}-${day} ${hour}:${minute}`\\n          }\\n          case 1: {\\n            return `${year}-${month}-${day}`\\n          }\\n          case 2: {\\n            return `${month}-${day}`\\n          }\\n        }\\n        return `${month}-${day} ${hour}-${minute}`\\n      }\\n    }\\n  }\\n)\\n\\nfetch('https://klinecharts.com/datas/kline.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n\"}"),b={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-formatDate-chart",code:e(m).js},null,8,["code"]))}},u=JSON.parse("{\"js\":\"import { init } from 'klinecharts';\\n\\nconst chart = init(\\n  'init-formatBigNumber-chart',\\n  {\\n    customApi: {\\n      formatBigNumber: value => {\\n        const v = +value\\n        if (typeof v === 'number') {\\n          if (v > 10000) {\\n            return `${+((v / 10000).toFixed(3))}万`\\n          }\\n        }\\n        return `${value}`\\n      }\\n    }\\n  }\\n)\\nchart.createIndicator('VOL')\\n\\nfetch('https://klinecharts.com/datas/kline.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n\"}"),w={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-formatBigNumber-chart",code:e(u).js},null,8,["code"]))}},_=JSON.parse(`{"js":"import { init } from 'klinecharts';\\n\\nconst chart = init(\\n  'init-thousandsSeparator-none-chart',\\n  { thousandsSeparator: { sign: '' } }\\n)\\n\\nfetch('https://klinecharts.com/datas/kline.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n"}`),I={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-thousandsSeparator-none-chart",code:e(_).js},null,8,["code"]))}},f=JSON.parse("{\"js\":\"import { init } from 'klinecharts';\\n\\nconst chart = init(\\n  'init-thousandsSeparator-format-chart',\\n  {\\n    thousandsSeparator: {\\n      format: value => {\\n        const sign = '.'\\n        const v = `${value}`\\n        if (v.includes('.')) {\\n          const arr = v.split('.')\\n          return `${arr[0].replace(/(\\\\d)(?=(\\\\d{3})+$)/g, $1 => `${$1}${sign}`)},${arr[1]}`\\n        }\\n        return v.replace(/(\\\\d)(?=(\\\\d{3})+$)/g, $1 => `${$1}${sign}`)\\n      }\\n    }\\n  }\\n)\\n\\nfetch('https://klinecharts.com/datas/kline.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n\"}"),D={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-thousandsSeparator-format-chart",code:e(f).js},null,8,["code"]))}},$=JSON.parse(`{"js":"import { init } from 'klinecharts';\\n\\nconst chart = init(\\n  'init-decimalFold-none-chart',\\n  { decimalFold: { threshold: 1000 } }\\n)\\n\\nchart.setPrecision({ price: 10 })\\n\\nfetch('https://klinecharts.com/datas/kline2.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n"}`),O={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-decimalFold-none-chart",code:e($).js},null,8,["code"]))}},j=JSON.parse("{\"js\":\"import { init } from 'klinecharts';\\n\\nconst subscriptNumbers = {\\n  '0': '₀',\\n  '1': '₁',\\n  '2': '₂',\\n  '3': '₃',\\n  '4': '₄',\\n  '5': '₅',\\n  '6': '₆',\\n  '7': '₇',\\n  '8': '₈',\\n  '9': '₉'\\n}\\n\\n\\nconst chart = init(\\n  'init-decimalFold-format-chart',\\n  {\\n    decimalFold: {\\n      format: value => {\\n        const vl = `${value}`;\\n        const reg = new RegExp('\\\\\\\\.0{3,}[1-9][0-9]*$');\\n        if (reg.test(vl)) {\\n          const result = vl.split('.');\\n          const lastIndex = result.length - 1;\\n          const v = result[lastIndex];\\n          const match = /0*/.exec(v);\\n          if (match) {\\n            const count = `${match[0].length}`;\\n            result[lastIndex] = v.replace(/0*/, `0${count.replace(/\\\\d/, $1 => subscriptNumbers[$1] ?? '')}`);\\n            return result.join('.')\\n          }\\n        }\\n        return vl;\\n      }\\n    }\\n  }\\n);\\n\\nchart.setPrecision({ price: 10 });\\n\\nfetch('https://klinecharts.com/datas/kline2.json')\\n  .then(res => res.json())\\n  .then(dataList => { chart.applyNewData(dataList); });\\n\"}"),J={__name:"index",setup(r){return(s,c)=>(a(),t(n,{chartId:"init-decimalFold-format-chart",code:e(j).js},null,8,["code"]))}};export{x as _,N as a,L as b,v as c,S as d,g as e,b as f,w as g,I as h,D as i,O as j,J as k};
